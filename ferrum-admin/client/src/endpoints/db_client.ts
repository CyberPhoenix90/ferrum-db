// This file was automatically generated by generate_client.ts. Want to regenerate it? Run `npm run create:client`
import { SuccessResponseCode, CollectionKeyType, CollectionValueType, CollectionCompression, CollectionPersistence, CollectionEvictionStrategy } from 'shared';

export class DbClient {
    public static async listCollections(body: {
            serverIP: string;
            serverPort: number;
            database: string;
        }): Promise<{
            collections?: string[];
            code: SuccessResponseCode;
            error?: string;
        }> {
        const request = await fetch('/api/db/listCollections', {
            method: 'POST',
            body: JSON.stringify(body),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!request.ok) {
            throw new Error('Request failed');
        }
        return request.json();
    }
    public static async createCollection(body: {
            serverIP: string;
            serverPort: number;
            dbName: string;
            collectionName: string;
            keyType: CollectionKeyType;
            valueType: CollectionValueType;
            compression: CollectionCompression;
            persistence: CollectionPersistence;
            evictionStrategy: CollectionEvictionStrategy;
            maxRecordCount: number;
            maxCollectionSize: number;
            pageSize: number;
            overProvisionFactor: number;
        }): Promise<{
            code: SuccessResponseCode;
            error?: string;
        }> {
        const request = await fetch('/api/db/createCollection', {
            method: 'POST',
            body: JSON.stringify(body),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!request.ok) {
            throw new Error('Request failed');
        }
        return request.json();
    }
    public static async hasCollection(body: {
            serverIP: string;
            serverPort: number;
            dbName: string;
            collectionName: string;
        }): Promise<{
            success: boolean;
            error?: string;
        }> {
        const request = await fetch('/api/db/hasCollection', {
            method: 'POST',
            body: JSON.stringify(body),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!request.ok) {
            throw new Error('Request failed');
        }
        return request.json();
    }
    public static async deleteCollection(body: {
            serverIP: string;
            serverPort: number;
            dbName: string;
            collectionName: string;
        }): Promise<{
            success: boolean;
            error?: string;
        }> {
        const request = await fetch('/api/db/deleteCollection', {
            method: 'POST',
            body: JSON.stringify(body),
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!request.ok) {
            throw new Error('Request failed');
        }
        return request.json();
    }
}
